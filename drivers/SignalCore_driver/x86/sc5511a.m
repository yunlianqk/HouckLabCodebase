function [methodinfo,structs,enuminfo,ThunkLibName]=sc5511a
%SC5511A Create structures to define interfaces found in 'sc5511a'.

%This function was generated by loadlibrary.m parser version  on Wed Aug 23 16:38:44 2017
%perl options:'sc5511a.i -outfile=sc5511a.m libusb'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
% int __stdcall libusb_init ( libusb_context ** ctx ); 
fcns.name{fcnNum}='libusb_init'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_contextPtrPtr'};fcnNum=fcnNum+1;
% void __stdcall libusb_exit ( libusb_context * ctx ); 
fcns.name{fcnNum}='libusb_exit'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'libusb_contextPtr'};fcnNum=fcnNum+1;
% void __stdcall libusb_set_debug ( libusb_context * ctx , int level ); 
fcns.name{fcnNum}='libusb_set_debug'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'libusb_contextPtr', 'int32'};fcnNum=fcnNum+1;
% const struct libusb_version * __stdcall libusb_get_version ( void ); 
fcns.name{fcnNum}='libusb_get_version'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='libusb_versionPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int __stdcall libusb_has_capability ( uint32_t capability ); 
fcns.name{fcnNum}='libusb_has_capability'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% const char * __stdcall libusb_error_name ( int errcode ); 
fcns.name{fcnNum}='libusb_error_name'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int __stdcall libusb_setlocale ( const char * locale ); 
fcns.name{fcnNum}='libusb_setlocale'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% const char * __stdcall libusb_strerror ( enum libusb_error errcode ); 
fcns.name{fcnNum}='libusb_strerror'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'libusb_error'};fcnNum=fcnNum+1;
% ssize_t __stdcall libusb_get_device_list ( libusb_context * ctx , libusb_device *** list ); 
fcns.name{fcnNum}='libusb_get_device_list'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_contextPtr', 'libusb_devicePtrPtrPtr'};fcnNum=fcnNum+1;
% void __stdcall libusb_free_device_list ( libusb_device ** list , int unref_devices ); 
fcns.name{fcnNum}='libusb_free_device_list'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'libusb_devicePtrPtr', 'int32'};fcnNum=fcnNum+1;
% libusb_device * __stdcall libusb_ref_device ( libusb_device * dev ); 
fcns.name{fcnNum}='libusb_ref_device'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='libusb_devicePtr'; fcns.RHS{fcnNum}={'libusb_devicePtr'};fcnNum=fcnNum+1;
% void __stdcall libusb_unref_device ( libusb_device * dev ); 
fcns.name{fcnNum}='libusb_unref_device'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'libusb_devicePtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_get_configuration ( libusb_device_handle * dev , int * config ); 
fcns.name{fcnNum}='libusb_get_configuration'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_device_handlePtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int __stdcall libusb_get_device_descriptor ( libusb_device * dev , struct libusb_device_descriptor * desc ); 
fcns.name{fcnNum}='libusb_get_device_descriptor'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_devicePtr', 'libusb_device_descriptorPtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_get_active_config_descriptor ( libusb_device * dev , struct libusb_config_descriptor ** config ); 
fcns.name{fcnNum}='libusb_get_active_config_descriptor'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_devicePtr', 'libusb_config_descriptorPtrPtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_get_config_descriptor ( libusb_device * dev , uint8_t config_index , struct libusb_config_descriptor ** config ); 
fcns.name{fcnNum}='libusb_get_config_descriptor'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_devicePtr', 'uint8', 'libusb_config_descriptorPtrPtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_get_config_descriptor_by_value ( libusb_device * dev , uint8_t bConfigurationValue , struct libusb_config_descriptor ** config ); 
fcns.name{fcnNum}='libusb_get_config_descriptor_by_value'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_devicePtr', 'uint8', 'libusb_config_descriptorPtrPtr'};fcnNum=fcnNum+1;
% void __stdcall libusb_free_config_descriptor ( struct libusb_config_descriptor * config ); 
fcns.name{fcnNum}='libusb_free_config_descriptor'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'libusb_config_descriptorPtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_get_ss_endpoint_companion_descriptor ( struct libusb_context * ctx , const struct libusb_endpoint_descriptor * endpoint , struct libusb_ss_endpoint_companion_descriptor ** ep_comp ); 
fcns.name{fcnNum}='libusb_get_ss_endpoint_companion_descriptor'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_contextPtr', 'libusb_endpoint_descriptorPtr', 'libusb_ss_endpoint_companion_descriptorPtrPtr'};fcnNum=fcnNum+1;
% void __stdcall libusb_free_ss_endpoint_companion_descriptor ( struct libusb_ss_endpoint_companion_descriptor * ep_comp ); 
fcns.name{fcnNum}='libusb_free_ss_endpoint_companion_descriptor'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'libusb_ss_endpoint_companion_descriptorPtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_get_bos_descriptor ( libusb_device_handle * handle , struct libusb_bos_descriptor ** bos ); 
fcns.name{fcnNum}='libusb_get_bos_descriptor'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_device_handlePtr', 'libusb_bos_descriptorPtrPtr'};fcnNum=fcnNum+1;
% void __stdcall libusb_free_bos_descriptor ( struct libusb_bos_descriptor * bos ); 
fcns.name{fcnNum}='libusb_free_bos_descriptor'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'libusb_bos_descriptorPtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_get_usb_2_0_extension_descriptor ( struct libusb_context * ctx , struct libusb_bos_dev_capability_descriptor * dev_cap , struct libusb_usb_2_0_extension_descriptor ** usb_2_0_extension ); 
fcns.name{fcnNum}='libusb_get_usb_2_0_extension_descriptor'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_contextPtr', 'libusb_bos_dev_capability_descriptorPtr', 'libusb_usb_2_0_extension_descriptorPtrPtr'};fcnNum=fcnNum+1;
% void __stdcall libusb_free_usb_2_0_extension_descriptor ( struct libusb_usb_2_0_extension_descriptor * usb_2_0_extension ); 
fcns.name{fcnNum}='libusb_free_usb_2_0_extension_descriptor'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'libusb_usb_2_0_extension_descriptorPtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_get_ss_usb_device_capability_descriptor ( struct libusb_context * ctx , struct libusb_bos_dev_capability_descriptor * dev_cap , struct libusb_ss_usb_device_capability_descriptor ** ss_usb_device_cap ); 
fcns.name{fcnNum}='libusb_get_ss_usb_device_capability_descriptor'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_contextPtr', 'libusb_bos_dev_capability_descriptorPtr', 'libusb_ss_usb_device_capability_descriptorPtrPtr'};fcnNum=fcnNum+1;
% void __stdcall libusb_free_ss_usb_device_capability_descriptor ( struct libusb_ss_usb_device_capability_descriptor * ss_usb_device_cap ); 
fcns.name{fcnNum}='libusb_free_ss_usb_device_capability_descriptor'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'libusb_ss_usb_device_capability_descriptorPtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_get_container_id_descriptor ( struct libusb_context * ctx , struct libusb_bos_dev_capability_descriptor * dev_cap , struct libusb_container_id_descriptor ** container_id ); 
fcns.name{fcnNum}='libusb_get_container_id_descriptor'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_contextPtr', 'libusb_bos_dev_capability_descriptorPtr', 'libusb_container_id_descriptorPtrPtr'};fcnNum=fcnNum+1;
% void __stdcall libusb_free_container_id_descriptor ( struct libusb_container_id_descriptor * container_id ); 
fcns.name{fcnNum}='libusb_free_container_id_descriptor'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'libusb_container_id_descriptorPtr'};fcnNum=fcnNum+1;
% uint8_t __stdcall libusb_get_bus_number ( libusb_device * dev ); 
fcns.name{fcnNum}='libusb_get_bus_number'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'libusb_devicePtr'};fcnNum=fcnNum+1;
% uint8_t __stdcall libusb_get_port_number ( libusb_device * dev ); 
fcns.name{fcnNum}='libusb_get_port_number'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'libusb_devicePtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_get_port_numbers ( libusb_device * dev , uint8_t * port_numbers , int port_numbers_len ); 
fcns.name{fcnNum}='libusb_get_port_numbers'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_devicePtr', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall libusb_get_port_path ( libusb_context * ctx , libusb_device * dev , uint8_t * path , uint8_t path_length ); 
fcns.name{fcnNum}='libusb_get_port_path'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_contextPtr', 'libusb_devicePtr', 'uint8Ptr', 'uint8'};fcnNum=fcnNum+1;
% libusb_device * __stdcall libusb_get_parent ( libusb_device * dev ); 
fcns.name{fcnNum}='libusb_get_parent'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='libusb_devicePtr'; fcns.RHS{fcnNum}={'libusb_devicePtr'};fcnNum=fcnNum+1;
% uint8_t __stdcall libusb_get_device_address ( libusb_device * dev ); 
fcns.name{fcnNum}='libusb_get_device_address'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='uint8'; fcns.RHS{fcnNum}={'libusb_devicePtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_get_device_speed ( libusb_device * dev ); 
fcns.name{fcnNum}='libusb_get_device_speed'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_devicePtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_get_max_packet_size ( libusb_device * dev , unsigned char endpoint ); 
fcns.name{fcnNum}='libusb_get_max_packet_size'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_devicePtr', 'uint8'};fcnNum=fcnNum+1;
% int __stdcall libusb_get_max_iso_packet_size ( libusb_device * dev , unsigned char endpoint ); 
fcns.name{fcnNum}='libusb_get_max_iso_packet_size'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_devicePtr', 'uint8'};fcnNum=fcnNum+1;
% int __stdcall libusb_open ( libusb_device * dev , libusb_device_handle ** handle ); 
fcns.name{fcnNum}='libusb_open'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_devicePtr', 'libusb_device_handlePtrPtr'};fcnNum=fcnNum+1;
% void __stdcall libusb_close ( libusb_device_handle * dev_handle ); 
fcns.name{fcnNum}='libusb_close'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'libusb_device_handlePtr'};fcnNum=fcnNum+1;
% libusb_device * __stdcall libusb_get_device ( libusb_device_handle * dev_handle ); 
fcns.name{fcnNum}='libusb_get_device'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='libusb_devicePtr'; fcns.RHS{fcnNum}={'libusb_device_handlePtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_set_configuration ( libusb_device_handle * dev , int configuration ); 
fcns.name{fcnNum}='libusb_set_configuration'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_device_handlePtr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall libusb_claim_interface ( libusb_device_handle * dev , int interface_number ); 
fcns.name{fcnNum}='libusb_claim_interface'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_device_handlePtr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall libusb_release_interface ( libusb_device_handle * dev , int interface_number ); 
fcns.name{fcnNum}='libusb_release_interface'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_device_handlePtr', 'int32'};fcnNum=fcnNum+1;
% libusb_device_handle * __stdcall libusb_open_device_with_vid_pid ( libusb_context * ctx , uint16_t vendor_id , uint16_t product_id ); 
fcns.name{fcnNum}='libusb_open_device_with_vid_pid'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='libusb_device_handlePtr'; fcns.RHS{fcnNum}={'libusb_contextPtr', 'uint16', 'uint16'};fcnNum=fcnNum+1;
% int __stdcall libusb_set_interface_alt_setting ( libusb_device_handle * dev , int interface_number , int alternate_setting ); 
fcns.name{fcnNum}='libusb_set_interface_alt_setting'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_device_handlePtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int __stdcall libusb_clear_halt ( libusb_device_handle * dev , unsigned char endpoint ); 
fcns.name{fcnNum}='libusb_clear_halt'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_device_handlePtr', 'uint8'};fcnNum=fcnNum+1;
% int __stdcall libusb_reset_device ( libusb_device_handle * dev ); 
fcns.name{fcnNum}='libusb_reset_device'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_device_handlePtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_kernel_driver_active ( libusb_device_handle * dev , int interface_number ); 
fcns.name{fcnNum}='libusb_kernel_driver_active'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_device_handlePtr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall libusb_detach_kernel_driver ( libusb_device_handle * dev , int interface_number ); 
fcns.name{fcnNum}='libusb_detach_kernel_driver'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_device_handlePtr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall libusb_attach_kernel_driver ( libusb_device_handle * dev , int interface_number ); 
fcns.name{fcnNum}='libusb_attach_kernel_driver'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_device_handlePtr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall libusb_set_auto_detach_kernel_driver ( libusb_device_handle * dev , int enable ); 
fcns.name{fcnNum}='libusb_set_auto_detach_kernel_driver'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_device_handlePtr', 'int32'};fcnNum=fcnNum+1;
% struct libusb_transfer * __stdcall libusb_alloc_transfer ( int iso_packets ); 
fcns.name{fcnNum}='libusb_alloc_transfer'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='libusb_transferPtr'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int __stdcall libusb_submit_transfer ( struct libusb_transfer * transfer ); 
fcns.name{fcnNum}='libusb_submit_transfer'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_transferPtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_cancel_transfer ( struct libusb_transfer * transfer ); 
fcns.name{fcnNum}='libusb_cancel_transfer'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_transferPtr'};fcnNum=fcnNum+1;
% void __stdcall libusb_free_transfer ( struct libusb_transfer * transfer ); 
fcns.name{fcnNum}='libusb_free_transfer'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'libusb_transferPtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_control_transfer ( libusb_device_handle * dev_handle , uint8_t request_type , uint8_t bRequest , uint16_t wValue , uint16_t wIndex , unsigned char * data , uint16_t wLength , unsigned int timeout ); 
fcns.name{fcnNum}='libusb_control_transfer'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_device_handlePtr', 'uint8', 'uint8', 'uint16', 'uint16', 'uint8Ptr', 'uint16', 'uint32'};fcnNum=fcnNum+1;
% int __stdcall libusb_bulk_transfer ( libusb_device_handle * dev_handle , unsigned char endpoint , unsigned char * data , int length , int * actual_length , unsigned int timeout ); 
fcns.name{fcnNum}='libusb_bulk_transfer'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_device_handlePtr', 'uint8', 'uint8Ptr', 'int32', 'int32Ptr', 'uint32'};fcnNum=fcnNum+1;
% int __stdcall libusb_interrupt_transfer ( libusb_device_handle * dev_handle , unsigned char endpoint , unsigned char * data , int length , int * actual_length , unsigned int timeout ); 
fcns.name{fcnNum}='libusb_interrupt_transfer'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_device_handlePtr', 'uint8', 'uint8Ptr', 'int32', 'int32Ptr', 'uint32'};fcnNum=fcnNum+1;
% int __stdcall libusb_get_string_descriptor_ascii ( libusb_device_handle * dev , uint8_t desc_index , unsigned char * data , int length ); 
fcns.name{fcnNum}='libusb_get_string_descriptor_ascii'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_device_handlePtr', 'uint8', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% int __stdcall libusb_try_lock_events ( libusb_context * ctx ); 
fcns.name{fcnNum}='libusb_try_lock_events'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_contextPtr'};fcnNum=fcnNum+1;
% void __stdcall libusb_lock_events ( libusb_context * ctx ); 
fcns.name{fcnNum}='libusb_lock_events'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'libusb_contextPtr'};fcnNum=fcnNum+1;
% void __stdcall libusb_unlock_events ( libusb_context * ctx ); 
fcns.name{fcnNum}='libusb_unlock_events'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'libusb_contextPtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_event_handling_ok ( libusb_context * ctx ); 
fcns.name{fcnNum}='libusb_event_handling_ok'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_contextPtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_event_handler_active ( libusb_context * ctx ); 
fcns.name{fcnNum}='libusb_event_handler_active'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_contextPtr'};fcnNum=fcnNum+1;
% void __stdcall libusb_lock_event_waiters ( libusb_context * ctx ); 
fcns.name{fcnNum}='libusb_lock_event_waiters'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'libusb_contextPtr'};fcnNum=fcnNum+1;
% void __stdcall libusb_unlock_event_waiters ( libusb_context * ctx ); 
fcns.name{fcnNum}='libusb_unlock_event_waiters'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'libusb_contextPtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_wait_for_event ( libusb_context * ctx , struct timeval * tv ); 
fcns.name{fcnNum}='libusb_wait_for_event'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_contextPtr', 'timevalPtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_handle_events_timeout ( libusb_context * ctx , struct timeval * tv ); 
fcns.name{fcnNum}='libusb_handle_events_timeout'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_contextPtr', 'timevalPtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_handle_events_timeout_completed ( libusb_context * ctx , struct timeval * tv , int * completed ); 
fcns.name{fcnNum}='libusb_handle_events_timeout_completed'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_contextPtr', 'timevalPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int __stdcall libusb_handle_events ( libusb_context * ctx ); 
fcns.name{fcnNum}='libusb_handle_events'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_contextPtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_handle_events_completed ( libusb_context * ctx , int * completed ); 
fcns.name{fcnNum}='libusb_handle_events_completed'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_contextPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int __stdcall libusb_handle_events_locked ( libusb_context * ctx , struct timeval * tv ); 
fcns.name{fcnNum}='libusb_handle_events_locked'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_contextPtr', 'timevalPtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_pollfds_handle_timeouts ( libusb_context * ctx ); 
fcns.name{fcnNum}='libusb_pollfds_handle_timeouts'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_contextPtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_get_next_timeout ( libusb_context * ctx , struct timeval * tv ); 
fcns.name{fcnNum}='libusb_get_next_timeout'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_contextPtr', 'timevalPtr'};fcnNum=fcnNum+1;
% const struct libusb_pollfd ** __stdcall libusb_get_pollfds ( libusb_context * ctx ); 
fcns.name{fcnNum}='libusb_get_pollfds'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='libusb_pollfdPtrPtr'; fcns.RHS{fcnNum}={'libusb_contextPtr'};fcnNum=fcnNum+1;
% void __stdcall libusb_set_pollfd_notifiers ( libusb_context * ctx , libusb_pollfd_added_cb added_cb , libusb_pollfd_removed_cb removed_cb , void * user_data ); 
fcns.name{fcnNum}='libusb_set_pollfd_notifiers'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'libusb_contextPtr', 'FcnPtr', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall libusb_hotplug_register_callback ( libusb_context * ctx , libusb_hotplug_event events , libusb_hotplug_flag flags , int vendor_id , int product_id , int dev_class , libusb_hotplug_callback_fn cb_fn , void * user_data , libusb_hotplug_callback_handle * handle ); 
fcns.name{fcnNum}='libusb_hotplug_register_callback'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'libusb_contextPtr', 'libusb_hotplug_event', 'libusb_hotplug_flag', 'int32', 'int32', 'int32', 'FcnPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% void __stdcall libusb_hotplug_deregister_callback ( libusb_context * ctx , libusb_hotplug_callback_handle handle ); 
fcns.name{fcnNum}='libusb_hotplug_deregister_callback'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'libusb_contextPtr', 'int32'};fcnNum=fcnNum+1;
%  int usb_transfer ( sc5511a_device_handle_t * dev_handle , int size , unsigned char * buffer_out , unsigned char * buffer_in ); 
fcns.name{fcnNum}='usb_transfer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'int32', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
%  int sc5511a_search_devices ( char ** serial_number_list ); 
fcns.name{fcnNum}='sc5511a_search_devices'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'stringPtrPtr'};fcnNum=fcnNum+1;
%  int sc5511a_search_devices_lv ( char * serial_number_list ); 
fcns.name{fcnNum}='sc5511a_search_devices_lv'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  sc5511a_device_handle_t * sc5511a_open_device ( char * dev_serial_num ); 
fcns.name{fcnNum}='sc5511a_open_device'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='sc5511a_device_handle_tPtr'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  sc5511a_device_handle_t * sc5511a_open_device_lv ( char * dev_serial_num ); 
fcns.name{fcnNum}='sc5511a_open_device_lv'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='sc5511a_device_handle_tPtr'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  int sc5511a_close_device ( sc5511a_device_handle_t * dev_handle ); 
fcns.name{fcnNum}='sc5511a_close_device'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr'};fcnNum=fcnNum+1;
%  int sc5511a_reg_write ( sc5511a_device_handle_t * dev_handle , unsigned char reg_byte , unsigned long long int instruct_word ); 
fcns.name{fcnNum}='sc5511a_reg_write'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'uint8', 'uint64'};fcnNum=fcnNum+1;
%  int sc5511a_reg_read ( sc5511a_device_handle_t * dev_handle , unsigned char reg_byte , unsigned long long int instruct_word , unsigned long long int * received_word ); 
fcns.name{fcnNum}='sc5511a_reg_read'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'uint8', 'uint64', 'uint64Ptr'};fcnNum=fcnNum+1;
%  int sc5511a_set_freq ( sc5511a_device_handle_t * dev_handle , unsigned long long int freq ); 
fcns.name{fcnNum}='sc5511a_set_freq'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'uint64'};fcnNum=fcnNum+1;
%  int sc5511a_set_synth_mode ( sc5511a_device_handle_t * dev_handle , unsigned char disable_spur_suppress , unsigned char low_loop_gain , unsigned char lock_mode ); 
fcns.name{fcnNum}='sc5511a_set_synth_mode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'uint8', 'uint8', 'uint8'};fcnNum=fcnNum+1;
%  int sc5511a_set_rf_mode ( sc5511a_device_handle_t * dev_handle , unsigned char rf_mode ); 
fcns.name{fcnNum}='sc5511a_set_rf_mode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'uint8'};fcnNum=fcnNum+1;
%  int sc5511a_list_mode_config ( sc5511a_device_handle_t * dev_handle , const list_mode_t * list_mode ); 
fcns.name{fcnNum}='sc5511a_list_mode_config'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'list_mode_tPtr'};fcnNum=fcnNum+1;
%  int sc5511a_list_start_freq ( sc5511a_device_handle_t * dev_handle , unsigned long long int freq ); 
fcns.name{fcnNum}='sc5511a_list_start_freq'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'uint64'};fcnNum=fcnNum+1;
%  int sc5511a_list_stop_freq ( sc5511a_device_handle_t * dev_handle , unsigned long long int freq ); 
fcns.name{fcnNum}='sc5511a_list_stop_freq'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'uint64'};fcnNum=fcnNum+1;
%  int sc5511a_list_step_freq ( sc5511a_device_handle_t * dev_handle , unsigned long long int freq ); 
fcns.name{fcnNum}='sc5511a_list_step_freq'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'uint64'};fcnNum=fcnNum+1;
%  int sc5511a_list_dwell_time ( sc5511a_device_handle_t * dev_handle , unsigned int dwell_time ); 
fcns.name{fcnNum}='sc5511a_list_dwell_time'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'uint32'};fcnNum=fcnNum+1;
%  int sc5511a_list_cycle_count ( sc5511a_device_handle_t * dev_handle , unsigned int cycle_count ); 
fcns.name{fcnNum}='sc5511a_list_cycle_count'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'uint32'};fcnNum=fcnNum+1;
%  int sc5511a_list_buffer_points ( sc5511a_device_handle_t * dev_handle , unsigned int list_points ); 
fcns.name{fcnNum}='sc5511a_list_buffer_points'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'uint32'};fcnNum=fcnNum+1;
%  int sc5511a_list_buffer_write ( sc5511a_device_handle_t * dev_handle , unsigned long long int freq ); 
fcns.name{fcnNum}='sc5511a_list_buffer_write'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'uint64'};fcnNum=fcnNum+1;
%  int sc5511a_list_buffer_transfer ( sc5511a_device_handle_t * dev_handle , unsigned char transfer_mode ); 
fcns.name{fcnNum}='sc5511a_list_buffer_transfer'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'uint8'};fcnNum=fcnNum+1;
%  int sc5511a_list_soft_trigger ( sc5511a_device_handle_t * dev_handle ); 
fcns.name{fcnNum}='sc5511a_list_soft_trigger'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr'};fcnNum=fcnNum+1;
%  int sc5511a_set_level ( sc5511a_device_handle_t * dev_handle , float power_level ); 
fcns.name{fcnNum}='sc5511a_set_level'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'single'};fcnNum=fcnNum+1;
%  int sc5511a_set_output ( sc5511a_device_handle_t * dev_handle , unsigned char enable ); 
fcns.name{fcnNum}='sc5511a_set_output'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'uint8'};fcnNum=fcnNum+1;
%  int sc5511a_set_auto_level_disable ( sc5511a_device_handle_t * dev_handle , unsigned char disable ); 
fcns.name{fcnNum}='sc5511a_set_auto_level_disable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'uint8'};fcnNum=fcnNum+1;
%  int sc5511a_set_alc_mode ( sc5511a_device_handle_t * dev_handle , unsigned char mode ); 
fcns.name{fcnNum}='sc5511a_set_alc_mode'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'uint8'};fcnNum=fcnNum+1;
%  int sc5511a_set_standby ( sc5511a_device_handle_t * dev_handle , unsigned char enable ); 
fcns.name{fcnNum}='sc5511a_set_standby'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'uint8'};fcnNum=fcnNum+1;
%  int sc5511a_set_clock_reference ( sc5511a_device_handle_t * dev_handle , unsigned char select_high , unsigned char lock_external ); 
fcns.name{fcnNum}='sc5511a_set_clock_reference'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'uint8', 'uint8'};fcnNum=fcnNum+1;
%  int sc5511a_set_reference_dac ( sc5511a_device_handle_t * dev_handle , unsigned short dac_value ); 
fcns.name{fcnNum}='sc5511a_set_reference_dac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'uint16'};fcnNum=fcnNum+1;
%  int sc5511a_set_alc_dac ( sc5511a_device_handle_t * dev_handle , unsigned short dac_value ); 
fcns.name{fcnNum}='sc5511a_set_alc_dac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'uint16'};fcnNum=fcnNum+1;
%  int sc5511a_store_default_state ( sc5511a_device_handle_t * dev_handle ); 
fcns.name{fcnNum}='sc5511a_store_default_state'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr'};fcnNum=fcnNum+1;
%  int sc5511a_set_rf2_standby ( sc5511a_device_handle_t * dev_handle , unsigned char enable ); 
fcns.name{fcnNum}='sc5511a_set_rf2_standby'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'uint8'};fcnNum=fcnNum+1;
%  int sc5511a_set_rf2_freq ( sc5511a_device_handle_t * dev_handle , unsigned short freq ); 
fcns.name{fcnNum}='sc5511a_set_rf2_freq'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'uint16'};fcnNum=fcnNum+1;
%  int sc5511a_synth_self_cal ( sc5511a_device_handle_t * dev_handle ); 
fcns.name{fcnNum}='sc5511a_synth_self_cal'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr'};fcnNum=fcnNum+1;
%  int sc5511a_get_rf_parameters ( sc5511a_device_handle_t * dev_handle , device_rf_params_t * device_rf_params ); 
fcns.name{fcnNum}='sc5511a_get_rf_parameters'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'device_rf_params_tPtr'};fcnNum=fcnNum+1;
%  int sc5511a_get_temperature ( sc5511a_device_handle_t * dev_handle , float * temp ); 
fcns.name{fcnNum}='sc5511a_get_temperature'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'singlePtr'};fcnNum=fcnNum+1;
%  int sc5511a_get_device_status ( sc5511a_device_handle_t * dev_handle , device_status_t * device_status ); 
fcns.name{fcnNum}='sc5511a_get_device_status'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'device_status_tPtr'};fcnNum=fcnNum+1;
%  int sc5511a_get_device_info ( sc5511a_device_handle_t * dev_handle , device_info_t * deviceInfo ); 
fcns.name{fcnNum}='sc5511a_get_device_info'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'voidPtr'};fcnNum=fcnNum+1;
%  int sc5511a_list_buffer_read ( sc5511a_device_handle_t * dev_handle , unsigned int address , unsigned long long int * freq ); 
fcns.name{fcnNum}='sc5511a_list_buffer_read'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'uint32', 'uint64Ptr'};fcnNum=fcnNum+1;
%  int sc5511a_get_alc_dac ( sc5511a_device_handle_t * dev_handle , unsigned short * dac_value ); 
fcns.name{fcnNum}='sc5511a_get_alc_dac'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'sc5511a_device_handle_tPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
structs.timeval.members=struct('tv_sec', 'long', 'tv_usec', 'long');
structs.libusb_device_descriptor.members=struct('bLength', 'uint8', 'bDescriptorType', 'uint8', 'bcdUSB', 'uint16', 'bDeviceClass', 'uint8', 'bDeviceSubClass', 'uint8', 'bDeviceProtocol', 'uint8', 'bMaxPacketSize0', 'uint8', 'idVendor', 'uint16', 'idProduct', 'uint16', 'bcdDevice', 'uint16', 'iManufacturer', 'uint8', 'iProduct', 'uint8', 'iSerialNumber', 'uint8', 'bNumConfigurations', 'uint8');
structs.libusb_endpoint_descriptor.members=struct('bLength', 'uint8', 'bDescriptorType', 'uint8', 'bEndpointAddress', 'uint8', 'bmAttributes', 'uint8', 'wMaxPacketSize', 'uint16', 'bInterval', 'uint8', 'bRefresh', 'uint8', 'bSynchAddress', 'uint8', 'extra', 'uint8Ptr', 'extra_length', 'int32');
structs.libusb_interface_descriptor.members=struct('bLength', 'uint8', 'bDescriptorType', 'uint8', 'bInterfaceNumber', 'uint8', 'bAlternateSetting', 'uint8', 'bNumEndpoints', 'uint8', 'bInterfaceClass', 'uint8', 'bInterfaceSubClass', 'uint8', 'bInterfaceProtocol', 'uint8', 'iInterface', 'uint8', 'endpoint', 'libusb_endpoint_descriptorPtr', 'extra', 'uint8Ptr', 'extra_length', 'int32');
structs.libusb_interface.members=struct('altsetting', 'libusb_interface_descriptorPtr', 'num_altsetting', 'int32');
structs.libusb_config_descriptor.members=struct('bLength', 'uint8', 'bDescriptorType', 'uint8', 'wTotalLength', 'uint16', 'bNumInterfaces', 'uint8', 'bConfigurationValue', 'uint8', 'iConfiguration', 'uint8', 'bmAttributes', 'uint8', 'MaxPower', 'uint8', 'interface', 'libusb_interfacePtr', 'extra', 'uint8Ptr', 'extra_length', 'int32');
structs.libusb_ss_endpoint_companion_descriptor.members=struct('bLength', 'uint8', 'bDescriptorType', 'uint8', 'bMaxBurst', 'uint8', 'bmAttributes', 'uint8', 'wBytesPerInterval', 'uint16');
structs.libusb_bos_dev_capability_descriptor.members=struct('bLength', 'uint8', 'bDescriptorType', 'uint8', 'bDevCapabilityType', 'uint8', 'dev_capability_data', 'uint8#0');
structs.libusb_bos_descriptor.members=struct('bLength', 'uint8', 'bDescriptorType', 'uint8', 'wTotalLength', 'uint16', 'bNumDeviceCaps', 'uint8', 'dev_capability', 'libusb_bos_dev_capability_descriptorPtr#0');
structs.libusb_usb_2_0_extension_descriptor.members=struct('bLength', 'uint8', 'bDescriptorType', 'uint8', 'bDevCapabilityType', 'uint8', 'bmAttributes', 'uint32');
structs.libusb_ss_usb_device_capability_descriptor.members=struct('bLength', 'uint8', 'bDescriptorType', 'uint8', 'bDevCapabilityType', 'uint8', 'bmAttributes', 'uint8', 'wSpeedSupported', 'uint16', 'bFunctionalitySupport', 'uint8', 'bU1DevExitLat', 'uint8', 'bU2DevExitLat', 'uint16');
structs.libusb_container_id_descriptor.members=struct('bLength', 'uint8', 'bDescriptorType', 'uint8', 'bDevCapabilityType', 'uint8', 'bReserved', 'uint8', 'ContainerID', 'uint8#16');
structs.libusb_control_setup.members=struct('bmRequestType', 'uint8', 'bRequest', 'uint8', 'wValue', 'uint16', 'wIndex', 'uint16', 'wLength', 'uint16');
structs.libusb_context.members=struct('');
structs.libusb_device.members=struct('');
structs.libusb_device_handle.members=struct('');
structs.libusb_hotplug_callback.members=struct('');
structs.libusb_version.members=struct('major', 'uint16', 'minor', 'uint16', 'micro', 'uint16', 'nano', 'uint16', 'rc', 'cstring', 'describe', 'cstring');
structs.libusb_iso_packet_descriptor.members=struct('length', 'uint32', 'actual_length', 'uint32', 'status', 'libusb_transfer_status');
structs.libusb_transfer.members=struct('dev_handle', 'libusb_device_handlePtr', 'flags', 'uint8', 'endpoint', 'uint8', 'type', 'uint8', 'timeout', 'uint32', 'status', 'libusb_transfer_status', 'length', 'int32', 'actual_length', 'int32', 'callback', 'FcnPtr', 'user_data', 'voidPtr', 'buffer', 'uint8Ptr', 'num_iso_packets', 'int32', 'iso_packet_desc', 'libusb_iso_packet_descriptor#0');
structs.libusb_pollfd.members=struct('fd', 'int32', 'events', 'int16');
structs.sc5511a_device_handle_t.members=struct('handle', 'libusb_device_handlePtr', 'ctx', 'libusb_contextPtr');
structs.list_mode_t.members=struct('sss_mode', 'uint8', 'sweep_dir', 'uint8', 'tri_waveform', 'uint8', 'hw_trigger', 'uint8', 'step_on_hw_trig', 'uint8', 'return_to_start', 'uint8', 'trig_out_enable', 'uint8', 'trig_out_on_cycle', 'uint8');
structs.pll_status_t.members=struct('sum_pll_ld', 'uint8', 'crs_pll_ld', 'uint8', 'fine_pll_ld', 'uint8', 'crs_ref_pll_ld', 'uint8', 'crs_aux_pll_ld', 'uint8', 'ref_100_pll_ld', 'uint8', 'ref_10_pll_ld', 'uint8', 'rf2_pll_ld', 'uint8');
structs.operate_status_t.members=struct('rf1_lock_mode', 'uint8', 'rf1_loop_gain', 'uint8', 'device_access', 'uint8', 'rf2_standby', 'uint8', 'rf1_standby', 'uint8', 'auto_pwr_disable', 'uint8', 'alc_mode', 'uint8', 'rf1_out_enable', 'uint8', 'ext_ref_lock_enable', 'uint8', 'ext_ref_detect', 'uint8', 'ref_out_select', 'uint8', 'list_mode_running', 'uint8', 'rf1_mode', 'uint8', 'over_temp', 'uint8', 'harmonic_ss', 'uint8');
structs.device_status_t.members=struct('list_mode', 'list_mode_t', 'operate_status', 'operate_status_t', 'pll_status', 'pll_status_t');
structs.device_rf_params_t.members=struct('rf1_freq', 'uint64', 'start_freq', 'uint64', 'stop_freq', 'uint64', 'step_freq', 'uint64', 'sweep_dwell_time', 'uint32', 'sweep_cycles', 'uint32', 'buffer_points', 'uint32', 'rf_level', 'single', 'rf2_freq', 'uint16');
enuminfo.libusb_iso_sync_type=struct('LIBUSB_ISO_SYNC_TYPE_NONE',0,'LIBUSB_ISO_SYNC_TYPE_ASYNC',1,'LIBUSB_ISO_SYNC_TYPE_ADAPTIVE',2,'LIBUSB_ISO_SYNC_TYPE_SYNC',3);
enuminfo.libusb_supported_speed=struct('LIBUSB_LOW_SPEED_OPERATION',1,'LIBUSB_FULL_SPEED_OPERATION',2,'LIBUSB_HIGH_SPEED_OPERATION',4,'LIBUSB_SUPER_SPEED_OPERATION',8);
enuminfo.libusb_transfer_type=struct('LIBUSB_TRANSFER_TYPE_CONTROL',0,'LIBUSB_TRANSFER_TYPE_ISOCHRONOUS',1,'LIBUSB_TRANSFER_TYPE_BULK',2,'LIBUSB_TRANSFER_TYPE_INTERRUPT',3);
enuminfo.libusb_hotplug_event=struct('LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED',1,'LIBUSB_HOTPLUG_EVENT_DEVICE_LEFT',2);
enuminfo.libusb_request_recipient=struct('LIBUSB_RECIPIENT_DEVICE',0,'LIBUSB_RECIPIENT_INTERFACE',1,'LIBUSB_RECIPIENT_ENDPOINT',2,'LIBUSB_RECIPIENT_OTHER',3);
enuminfo.libusb_ss_usb_device_capability_attributes=struct('LIBUSB_BM_LTM_SUPPORT',2);
enuminfo.libusb_transfer_status=struct('LIBUSB_TRANSFER_COMPLETED',0,'LIBUSB_TRANSFER_ERROR',1,'LIBUSB_TRANSFER_TIMED_OUT',2,'LIBUSB_TRANSFER_CANCELLED',3,'LIBUSB_TRANSFER_STALL',4,'LIBUSB_TRANSFER_NO_DEVICE',5,'LIBUSB_TRANSFER_OVERFLOW',6);
enuminfo.libusb_class_code=struct('LIBUSB_CLASS_PER_INTERFACE',0,'LIBUSB_CLASS_AUDIO',1,'LIBUSB_CLASS_COMM',2,'LIBUSB_CLASS_HID',3,'LIBUSB_CLASS_PHYSICAL',5,'LIBUSB_CLASS_PRINTER',7,'LIBUSB_CLASS_PTP',6,'LIBUSB_CLASS_IMAGE',6,'LIBUSB_CLASS_MASS_STORAGE',8,'LIBUSB_CLASS_HUB',9,'LIBUSB_CLASS_DATA',10,'LIBUSB_CLASS_SMART_CARD',11,'LIBUSB_CLASS_CONTENT_SECURITY',13,'LIBUSB_CLASS_VIDEO',14,'LIBUSB_CLASS_PERSONAL_HEALTHCARE',15,'LIBUSB_CLASS_DIAGNOSTIC_DEVICE',220,'LIBUSB_CLASS_WIRELESS',224,'LIBUSB_CLASS_APPLICATION',254,'LIBUSB_CLASS_VENDOR_SPEC',255);
enuminfo.libusb_bos_type=struct('LIBUSB_BT_WIRELESS_USB_DEVICE_CAPABILITY',1,'LIBUSB_BT_USB_2_0_EXTENSION',2,'LIBUSB_BT_SS_USB_DEVICE_CAPABILITY',3,'LIBUSB_BT_CONTAINER_ID',4);
enuminfo.libusb_usb_2_0_extension_attributes=struct('LIBUSB_BM_LPM_SUPPORT',2);
enuminfo.libusb_error=struct('LIBUSB_SUCCESS',0,'LIBUSB_ERROR_IO',-1,'LIBUSB_ERROR_INVALID_PARAM',-2,'LIBUSB_ERROR_ACCESS',-3,'LIBUSB_ERROR_NO_DEVICE',-4,'LIBUSB_ERROR_NOT_FOUND',-5,'LIBUSB_ERROR_BUSY',-6,'LIBUSB_ERROR_TIMEOUT',-7,'LIBUSB_ERROR_OVERFLOW',-8,'LIBUSB_ERROR_PIPE',-9,'LIBUSB_ERROR_INTERRUPTED',-10,'LIBUSB_ERROR_NO_MEM',-11,'LIBUSB_ERROR_NOT_SUPPORTED',-12,'LIBUSB_ERROR_OTHER',-99);
enuminfo.libusb_descriptor_type=struct('LIBUSB_DT_DEVICE',1,'LIBUSB_DT_CONFIG',2,'LIBUSB_DT_STRING',3,'LIBUSB_DT_INTERFACE',4,'LIBUSB_DT_ENDPOINT',5,'LIBUSB_DT_BOS',15,'LIBUSB_DT_DEVICE_CAPABILITY',16,'LIBUSB_DT_HID',33,'LIBUSB_DT_REPORT',34,'LIBUSB_DT_PHYSICAL',35,'LIBUSB_DT_HUB',41,'LIBUSB_DT_SUPERSPEED_HUB',42,'LIBUSB_DT_SS_ENDPOINT_COMPANION',48);
enuminfo.libusb_standard_request=struct('LIBUSB_REQUEST_GET_STATUS',0,'LIBUSB_REQUEST_CLEAR_FEATURE',1,'LIBUSB_REQUEST_SET_FEATURE',3,'LIBUSB_REQUEST_SET_ADDRESS',5,'LIBUSB_REQUEST_GET_DESCRIPTOR',6,'LIBUSB_REQUEST_SET_DESCRIPTOR',7,'LIBUSB_REQUEST_GET_CONFIGURATION',8,'LIBUSB_REQUEST_SET_CONFIGURATION',9,'LIBUSB_REQUEST_GET_INTERFACE',10,'LIBUSB_REQUEST_SET_INTERFACE',11,'LIBUSB_REQUEST_SYNCH_FRAME',12,'LIBUSB_REQUEST_SET_SEL',48,'LIBUSB_SET_ISOCH_DELAY',49);
enuminfo.libusb_transfer_flags=struct('LIBUSB_TRANSFER_SHORT_NOT_OK',1,'LIBUSB_TRANSFER_FREE_BUFFER',2,'LIBUSB_TRANSFER_FREE_TRANSFER',4,'LIBUSB_TRANSFER_ADD_ZERO_PACKET',8);
enuminfo.libusb_speed=struct('LIBUSB_SPEED_UNKNOWN',0,'LIBUSB_SPEED_LOW',1,'LIBUSB_SPEED_FULL',2,'LIBUSB_SPEED_HIGH',3,'LIBUSB_SPEED_SUPER',4);
enuminfo.libusb_iso_usage_type=struct('LIBUSB_ISO_USAGE_TYPE_DATA',0,'LIBUSB_ISO_USAGE_TYPE_FEEDBACK',1,'LIBUSB_ISO_USAGE_TYPE_IMPLICIT',2);
enuminfo.libusb_capability=struct('LIBUSB_CAP_HAS_CAPABILITY',0,'LIBUSB_CAP_HAS_HOTPLUG',1,'LIBUSB_CAP_HAS_HID_ACCESS',256,'LIBUSB_CAP_SUPPORTS_DETACH_KERNEL_DRIVER',257);
enuminfo.libusb_hotplug_flag=struct('LIBUSB_HOTPLUG_ENUMERATE',1);
enuminfo.libusb_request_type=struct('LIBUSB_REQUEST_TYPE_STANDARD',0,'LIBUSB_REQUEST_TYPE_CLASS',32,'LIBUSB_REQUEST_TYPE_VENDOR',64,'LIBUSB_REQUEST_TYPE_RESERVED',96);
enuminfo.libusb_log_level=struct('LIBUSB_LOG_LEVEL_NONE',0,'LIBUSB_LOG_LEVEL_ERROR',1,'LIBUSB_LOG_LEVEL_WARNING',2,'LIBUSB_LOG_LEVEL_INFO',3,'LIBUSB_LOG_LEVEL_DEBUG',4);
enuminfo.libusb_endpoint_direction=struct('LIBUSB_ENDPOINT_IN',128,'LIBUSB_ENDPOINT_OUT',0);
methodinfo=fcns;