function [methodinfo,structs,enuminfo,ThunkLibName]=LabBrickProto
%LABBRICKPROTO Create structures to define interfaces found in 'vnx_LMS_api'.

%This function was generated by loadlibrary.m parser version  on Sat Sep  2 16:21:13 2017
%perl options:'vnx_LMS_api.i -outfile=LabBrickProto.m -thunkfile=vnx_fmsynth_thunk_pcwin64.c -header=vnx_LMS_api.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'vnx_fmsynth_thunk_pcwin64');
%  void fnLMS_SetTestMode ( bool testmode ); 
fcns.thunkname{fcnNum}='voidboolThunk';fcns.name{fcnNum}='fnLMS_SetTestMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'bool'};fcnNum=fcnNum+1;
%  int fnLMS_GetNumDevices (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='fnLMS_GetNumDevices'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int fnLMS_GetDevInfo ( unsigned int * ActiveDevices ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='fnLMS_GetDevInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32Ptr'};fcnNum=fcnNum+1;
%  int fnLMS_GetModelNameA ( unsigned int deviceID , char * ModelName ); 
fcns.thunkname{fcnNum}='int32uint32cstringThunk';fcns.name{fcnNum}='fnLMS_GetModelNameA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'cstring'};fcnNum=fcnNum+1;
%  int fnLMS_InitDevice ( unsigned int deviceID ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='fnLMS_InitDevice'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  int fnLMS_CloseDevice ( unsigned int deviceID ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='fnLMS_CloseDevice'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  int fnLMS_GetSerialNumber ( unsigned int deviceID ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='fnLMS_GetSerialNumber'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  int fnLMS_GetDLLVersion (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='fnLMS_GetDLLVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int fnLMS_SetFrequency ( unsigned int deviceID , int frequency ); 
fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='fnLMS_SetFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%  int fnLMS_SetStartFrequency ( unsigned int deviceID , int startfrequency ); 
fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='fnLMS_SetStartFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%  int fnLMS_SetEndFrequency ( unsigned int deviceID , int endfrequency ); 
fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='fnLMS_SetEndFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%  int fnLMS_SetSweepTime ( unsigned int deviceID , int sweeptime ); 
fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='fnLMS_SetSweepTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%  int fnLMS_SetPowerLevel ( unsigned int deviceID , int powerlevel ); 
fcns.thunkname{fcnNum}='int32uint32int32Thunk';fcns.name{fcnNum}='fnLMS_SetPowerLevel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'int32'};fcnNum=fcnNum+1;
%  int fnLMS_SetRFOn ( unsigned int deviceID , bool on ); 
fcns.thunkname{fcnNum}='int32uint32boolThunk';fcns.name{fcnNum}='fnLMS_SetRFOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'bool'};fcnNum=fcnNum+1;
%  int fnLMS_SetPulseOnTime ( unsigned int deviceID , float pulseontime ); 
fcns.thunkname{fcnNum}='int32uint32floatThunk';fcns.name{fcnNum}='fnLMS_SetPulseOnTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'single'};fcnNum=fcnNum+1;
%  int fnLMS_SetPulseOffTime ( unsigned int deviceID , float pulseofftime ); 
fcns.thunkname{fcnNum}='int32uint32floatThunk';fcns.name{fcnNum}='fnLMS_SetPulseOffTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'single'};fcnNum=fcnNum+1;
%  int fnLMS_EnableInternalPulseMod ( unsigned int deviceID , bool on ); 
fcns.thunkname{fcnNum}='int32uint32boolThunk';fcns.name{fcnNum}='fnLMS_EnableInternalPulseMod'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'bool'};fcnNum=fcnNum+1;
%  int fnLMS_SetUseExternalPulseMod ( unsigned int deviceID , bool external ); 
fcns.thunkname{fcnNum}='int32uint32boolThunk';fcns.name{fcnNum}='fnLMS_SetUseExternalPulseMod'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'bool'};fcnNum=fcnNum+1;
%  int fnLMS_SetFastPulsedOutput ( unsigned int deviceID , float pulseontime , float pulsereptime , bool on ); 
fcns.thunkname{fcnNum}='int32uint32floatfloatboolThunk';fcns.name{fcnNum}='fnLMS_SetFastPulsedOutput'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'single', 'single', 'bool'};fcnNum=fcnNum+1;
%  int fnLMS_SetUseInternalRef ( unsigned int deviceID , bool internal ); 
fcns.thunkname{fcnNum}='int32uint32boolThunk';fcns.name{fcnNum}='fnLMS_SetUseInternalRef'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'bool'};fcnNum=fcnNum+1;
%  int fnLMS_SetSweepDirection ( unsigned int deviceID , bool up ); 
fcns.thunkname{fcnNum}='int32uint32boolThunk';fcns.name{fcnNum}='fnLMS_SetSweepDirection'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'bool'};fcnNum=fcnNum+1;
%  int fnLMS_SetSweepMode ( unsigned int deviceID , bool mode ); 
fcns.thunkname{fcnNum}='int32uint32boolThunk';fcns.name{fcnNum}='fnLMS_SetSweepMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'bool'};fcnNum=fcnNum+1;
%  int fnLMS_SetSweepType ( unsigned int deviceID , bool swptype ); 
fcns.thunkname{fcnNum}='int32uint32boolThunk';fcns.name{fcnNum}='fnLMS_SetSweepType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'bool'};fcnNum=fcnNum+1;
%  int fnLMS_StartSweep ( unsigned int deviceID , bool go ); 
fcns.thunkname{fcnNum}='int32uint32boolThunk';fcns.name{fcnNum}='fnLMS_StartSweep'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'bool'};fcnNum=fcnNum+1;
%  int fnLMS_SaveSettings ( unsigned int deviceID ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='fnLMS_SaveSettings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  int fnLMS_GetFrequency ( unsigned int deviceID ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='fnLMS_GetFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  int fnLMS_GetStartFrequency ( unsigned int deviceID ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='fnLMS_GetStartFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  int fnLMS_GetEndFrequency ( unsigned int deviceID ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='fnLMS_GetEndFrequency'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  int fnLMS_GetSweepTime ( unsigned int deviceID ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='fnLMS_GetSweepTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  int fnLMS_GetRF_On ( unsigned int deviceID ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='fnLMS_GetRF_On'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  int fnLMS_GetUseInternalRef ( unsigned int deviceID ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='fnLMS_GetUseInternalRef'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  int fnLMS_GetPowerLevel ( unsigned int deviceID ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='fnLMS_GetPowerLevel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  int fnLMS_GetAbsPowerLevel ( unsigned int deviceID ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='fnLMS_GetAbsPowerLevel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  int fnLMS_GetMaxPwr ( unsigned int deviceID ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='fnLMS_GetMaxPwr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  int fnLMS_GetMinPwr ( unsigned int deviceID ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='fnLMS_GetMinPwr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  int fnLMS_GetMaxFreq ( unsigned int deviceID ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='fnLMS_GetMaxFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  int fnLMS_GetMinFreq ( unsigned int deviceID ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='fnLMS_GetMinFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  float fnLMS_GetPulseOnTime ( unsigned int deviceID ); 
fcns.thunkname{fcnNum}='floatuint32Thunk';fcns.name{fcnNum}='fnLMS_GetPulseOnTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='single'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  float fnLMS_GetPulseOffTime ( unsigned int deviceID ); 
fcns.thunkname{fcnNum}='floatuint32Thunk';fcns.name{fcnNum}='fnLMS_GetPulseOffTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='single'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  int fnLMS_GetPulseMode ( unsigned int deviceID ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='fnLMS_GetPulseMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  int fnLMS_GetHasFastPulseMode ( unsigned int deviceID ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='fnLMS_GetHasFastPulseMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  int fnLMS_GetUseInternalPulseMod ( unsigned int deviceID ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='fnLMS_GetUseInternalPulseMod'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
%  int fnLMS_GetDeviceStatus ( unsigned int deviceID ); 
fcns.thunkname{fcnNum}='int32uint32Thunk';fcns.name{fcnNum}='fnLMS_GetDeviceStatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
methodinfo=fcns;